from qgis.PyQt.QtCore import Qt
from qgis.PyQt.QtGui import QColor, QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox
from qgis.core import (
    QgsProject,
    QgsVectorLayer,
    QgsCoordinateReferenceSystem,
    QgsWkbTypes
)
import processing

class PolygonOutlineReproject:
    def __init__(self, iface):
        self.iface = iface
        self.action = None

    def initGui(self):
        self.action = QAction(QIcon("icon.png"), "Reprojetar como contorno", self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addPluginToMenu("&Polygon Outline Reproject", self.action)
        self.iface.addToolBarIcon(self.action)

    def unload(self):
        self.iface.removePluginMenu("&Polygon Outline Reproject", self.action)
        self.iface.removeToolBarIcon(self.action)

    def run(self):
        layer = self.iface.activeLayer()
        if not layer:
            self.show_message("Erro", "Nenhuma camada selecionada.")
            return

        if layer.geometryType() != QgsWkbTypes.PolygonGeometry:
            self.show_message("Erro", "A camada selecionada não é de polígonos.")
            return

        try:
            new_layer = self.reproject_layer(layer)
            self.style_layer(new_layer)
            QgsProject.instance().addMapLayer(new_layer)
            self.show_message("Sucesso", "Camada reprojetada e estilizada adicionada ao projeto.")
        except Exception as e:
            self.show_message("Erro", str(e))

    def reproject_layer(self, layer):
        params = {
            'INPUT': layer,
            'OPERATION': '+proj=noop',
            'TARGET_CRS': QgsCoordinateReferenceSystem('EPSG:4326'),
            'OUTPUT': 'memory:'
        }
        result = processing.run("native:reprojectlayer", params)
        return result['OUTPUT']

    def style_layer(self, new_layer):
        symbol = new_layer.renderer().symbol()
        symbol.setColor(Qt.transparent)
        symbol.symbolLayer(0).setStrokeColor(QColor("red"))
        symbol.symbolLayer(0).setStrokeWidth(0.26)
        new_layer.setName(f"{layer.name()}_contorno_4326")

    def show_message(self, title, message):
        QMessageBox.information(self.iface.mainWindow(), title, message)
